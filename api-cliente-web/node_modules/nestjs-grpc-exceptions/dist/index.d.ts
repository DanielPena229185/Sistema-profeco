import { RpcExceptionFilter, NestInterceptor, ExecutionContext, CallHandler } from '@nestjs/common';
import { RpcException } from '@nestjs/microservices';
import { Observable } from 'rxjs';

declare class GrpcServerExceptionFilter implements RpcExceptionFilter<RpcException> {
    catch(exception: RpcException): Observable<any>;
}

declare class GrpcNotFoundException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcAbortedException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcUnknownException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcInternalException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcUnavailableException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcUnauthenticatedException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcPermissionDeniedException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcInvalidArgumentException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcResourceExhaustedException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcAlreadyExistsException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcCancelledException extends RpcException {
    constructor(error: string | object);
}

declare class GrpcToHttpInterceptor implements NestInterceptor {
    intercept(_context: ExecutionContext, next: CallHandler<any>): Observable<any> | Promise<Observable<any>>;
}

declare class HttpToGrpcInterceptor implements NestInterceptor {
    intercept(_context: ExecutionContext, next: CallHandler<any>): Observable<any> | Promise<Observable<any>>;
}

export { GrpcAbortedException, GrpcAlreadyExistsException, GrpcCancelledException, GrpcInternalException, GrpcInvalidArgumentException, GrpcNotFoundException, GrpcPermissionDeniedException, GrpcResourceExhaustedException, GrpcServerExceptionFilter, GrpcToHttpInterceptor, GrpcUnauthenticatedException, GrpcUnavailableException, GrpcUnknownException, HttpToGrpcInterceptor };
