// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/product.proto

package go_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductsClient is the client API for Products service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsClient interface {
	GetProductsByPrice(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*CompareProductList, error)
	GetProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error)
	GetProductById(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*Product, error)
	GetCompareProductListById(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*CompareProductList, error)
	UpdateProductPrice(ctx context.Context, in *UpdateProductPriceRequest, opts ...grpc.CallOption) (*Empty, error)
}

type productsClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsClient(cc grpc.ClientConnInterface) ProductsClient {
	return &productsClient{cc}
}

func (c *productsClient) GetProductsByPrice(ctx context.Context, in *ProductListRequest, opts ...grpc.CallOption) (*CompareProductList, error) {
	out := new(CompareProductList)
	err := c.cc.Invoke(ctx, "/proto.Products/GetProductsByPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error) {
	out := new(ProductList)
	err := c.cc.Invoke(ctx, "/proto.Products/GetProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetProductById(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/proto.Products/GetProductById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) GetCompareProductListById(ctx context.Context, in *ProductByIdRequest, opts ...grpc.CallOption) (*CompareProductList, error) {
	out := new(CompareProductList)
	err := c.cc.Invoke(ctx, "/proto.Products/GetCompareProductListById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productsClient) UpdateProductPrice(ctx context.Context, in *UpdateProductPriceRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/proto.Products/UpdateProductPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductsServer is the server API for Products service.
// All implementations must embed UnimplementedProductsServer
// for forward compatibility
type ProductsServer interface {
	GetProductsByPrice(context.Context, *ProductListRequest) (*CompareProductList, error)
	GetProducts(context.Context, *Empty) (*ProductList, error)
	GetProductById(context.Context, *ProductByIdRequest) (*Product, error)
	GetCompareProductListById(context.Context, *ProductByIdRequest) (*CompareProductList, error)
	UpdateProductPrice(context.Context, *UpdateProductPriceRequest) (*Empty, error)
	mustEmbedUnimplementedProductsServer()
}

// UnimplementedProductsServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServer struct {
}

func (UnimplementedProductsServer) GetProductsByPrice(context.Context, *ProductListRequest) (*CompareProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductsByPrice not implemented")
}
func (UnimplementedProductsServer) GetProducts(context.Context, *Empty) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducts not implemented")
}
func (UnimplementedProductsServer) GetProductById(context.Context, *ProductByIdRequest) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductById not implemented")
}
func (UnimplementedProductsServer) GetCompareProductListById(context.Context, *ProductByIdRequest) (*CompareProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompareProductListById not implemented")
}
func (UnimplementedProductsServer) UpdateProductPrice(context.Context, *UpdateProductPriceRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProductPrice not implemented")
}
func (UnimplementedProductsServer) mustEmbedUnimplementedProductsServer() {}

// UnsafeProductsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServer will
// result in compilation errors.
type UnsafeProductsServer interface {
	mustEmbedUnimplementedProductsServer()
}

func RegisterProductsServer(s grpc.ServiceRegistrar, srv ProductsServer) {
	s.RegisterService(&Products_ServiceDesc, srv)
}

func _Products_GetProductsByPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProductsByPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/GetProductsByPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProductsByPrice(ctx, req.(*ProductListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/GetProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetProductById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetProductById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/GetProductById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetProductById(ctx, req.(*ProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_GetCompareProductListById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).GetCompareProductListById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/GetCompareProductListById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).GetCompareProductListById(ctx, req.(*ProductByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Products_UpdateProductPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProductPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductsServer).UpdateProductPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Products/UpdateProductPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductsServer).UpdateProductPrice(ctx, req.(*UpdateProductPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Products_ServiceDesc is the grpc.ServiceDesc for Products service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Products_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Products",
	HandlerType: (*ProductsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProductsByPrice",
			Handler:    _Products_GetProductsByPrice_Handler,
		},
		{
			MethodName: "GetProducts",
			Handler:    _Products_GetProducts_Handler,
		},
		{
			MethodName: "GetProductById",
			Handler:    _Products_GetProductById_Handler,
		},
		{
			MethodName: "GetCompareProductListById",
			Handler:    _Products_GetCompareProductListById_Handler,
		},
		{
			MethodName: "UpdateProductPrice",
			Handler:    _Products_UpdateProductPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/product.proto",
}
