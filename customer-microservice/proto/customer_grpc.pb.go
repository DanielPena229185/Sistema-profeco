// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/customer.proto

package customer_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomersClient is the client API for Customers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomersClient interface {
	CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error)
	GetCustomerById(ctx context.Context, in *CustomerByIdRequest, opts ...grpc.CallOption) (*Customer, error)
}

type customersClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomersClient(cc grpc.ClientConnInterface) CustomersClient {
	return &customersClient{cc}
}

func (c *customersClient) CreateCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/proto.Customers/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customersClient) GetCustomerById(ctx context.Context, in *CustomerByIdRequest, opts ...grpc.CallOption) (*Customer, error) {
	out := new(Customer)
	err := c.cc.Invoke(ctx, "/proto.Customers/GetCustomerById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomersServer is the server API for Customers service.
// All implementations must embed UnimplementedCustomersServer
// for forward compatibility
type CustomersServer interface {
	CreateCustomer(context.Context, *Customer) (*Customer, error)
	GetCustomerById(context.Context, *CustomerByIdRequest) (*Customer, error)
	mustEmbedUnimplementedCustomersServer()
}

// UnimplementedCustomersServer must be embedded to have forward compatible implementations.
type UnimplementedCustomersServer struct {
}

func (UnimplementedCustomersServer) CreateCustomer(context.Context, *Customer) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomer not implemented")
}
func (UnimplementedCustomersServer) GetCustomerById(context.Context, *CustomerByIdRequest) (*Customer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerById not implemented")
}
func (UnimplementedCustomersServer) mustEmbedUnimplementedCustomersServer() {}

// UnsafeCustomersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomersServer will
// result in compilation errors.
type UnsafeCustomersServer interface {
	mustEmbedUnimplementedCustomersServer()
}

func RegisterCustomersServer(s grpc.ServiceRegistrar, srv CustomersServer) {
	s.RegisterService(&Customers_ServiceDesc, srv)
}

func _Customers_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Customers/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).CreateCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Customers_GetCustomerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomersServer).GetCustomerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Customers/GetCustomerById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomersServer).GetCustomerById(ctx, req.(*CustomerByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Customers_ServiceDesc is the grpc.ServiceDesc for Customers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Customers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Customers",
	HandlerType: (*CustomersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _Customers_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomerById",
			Handler:    _Customers_GetCustomerById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/customer.proto",
}
