// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/preferences.proto

package preferences_microservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CustomerPreferencesClient is the client API for CustomerPreferences service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerPreferencesClient interface {
	AddVisitedProduct(ctx context.Context, in *AddVisitedProductRequest, opts ...grpc.CallOption) (*VisitedProductsList, error)
	GetVisitedProductList(ctx context.Context, in *PreferencesDefaultRequest, opts ...grpc.CallOption) (*VisitedProductsList, error)
}

type customerPreferencesClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerPreferencesClient(cc grpc.ClientConnInterface) CustomerPreferencesClient {
	return &customerPreferencesClient{cc}
}

func (c *customerPreferencesClient) AddVisitedProduct(ctx context.Context, in *AddVisitedProductRequest, opts ...grpc.CallOption) (*VisitedProductsList, error) {
	out := new(VisitedProductsList)
	err := c.cc.Invoke(ctx, "/proto.CustomerPreferences/AddVisitedProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerPreferencesClient) GetVisitedProductList(ctx context.Context, in *PreferencesDefaultRequest, opts ...grpc.CallOption) (*VisitedProductsList, error) {
	out := new(VisitedProductsList)
	err := c.cc.Invoke(ctx, "/proto.CustomerPreferences/GetVisitedProductList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerPreferencesServer is the server API for CustomerPreferences service.
// All implementations must embed UnimplementedCustomerPreferencesServer
// for forward compatibility
type CustomerPreferencesServer interface {
	AddVisitedProduct(context.Context, *AddVisitedProductRequest) (*VisitedProductsList, error)
	GetVisitedProductList(context.Context, *PreferencesDefaultRequest) (*VisitedProductsList, error)
	mustEmbedUnimplementedCustomerPreferencesServer()
}

// UnimplementedCustomerPreferencesServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerPreferencesServer struct {
}

func (UnimplementedCustomerPreferencesServer) AddVisitedProduct(context.Context, *AddVisitedProductRequest) (*VisitedProductsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVisitedProduct not implemented")
}
func (UnimplementedCustomerPreferencesServer) GetVisitedProductList(context.Context, *PreferencesDefaultRequest) (*VisitedProductsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVisitedProductList not implemented")
}
func (UnimplementedCustomerPreferencesServer) mustEmbedUnimplementedCustomerPreferencesServer() {}

// UnsafeCustomerPreferencesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerPreferencesServer will
// result in compilation errors.
type UnsafeCustomerPreferencesServer interface {
	mustEmbedUnimplementedCustomerPreferencesServer()
}

func RegisterCustomerPreferencesServer(s grpc.ServiceRegistrar, srv CustomerPreferencesServer) {
	s.RegisterService(&CustomerPreferences_ServiceDesc, srv)
}

func _CustomerPreferences_AddVisitedProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVisitedProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerPreferencesServer).AddVisitedProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CustomerPreferences/AddVisitedProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerPreferencesServer).AddVisitedProduct(ctx, req.(*AddVisitedProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerPreferences_GetVisitedProductList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreferencesDefaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerPreferencesServer).GetVisitedProductList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CustomerPreferences/GetVisitedProductList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerPreferencesServer).GetVisitedProductList(ctx, req.(*PreferencesDefaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerPreferences_ServiceDesc is the grpc.ServiceDesc for CustomerPreferences service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerPreferences_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CustomerPreferences",
	HandlerType: (*CustomerPreferencesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddVisitedProduct",
			Handler:    _CustomerPreferences_AddVisitedProduct_Handler,
		},
		{
			MethodName: "GetVisitedProductList",
			Handler:    _CustomerPreferences_GetVisitedProductList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/preferences.proto",
}
