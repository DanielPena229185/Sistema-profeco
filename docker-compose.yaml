services:

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: rabbitmq
    networks:
      - profeco
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30

  # Frontend 
  # TODO

  # Backend services

  api-cliente-web:
    # image: silverflin/profeco-api-cliente-web:latest
    build:
      context: ./api-cliente-web
    ports:
      - "3050:3001"
    networks:
      - profeco

  api-cliente-movil:
    # image: silverflin/profeco-api-cliente-movil:latest
    build:
      context: ./api-cliente-movil
    ports:
      - "3051:4000"
    networks:
      - profeco

  api-tienda:
    image: silverflin/profeco-api-tienda:latest
    ports:
      - "3052:3000"
    networks:
      - profeco

  # --- Microservices --- 

  # Products microservice
  product-mongodb:
    image: mongo
    networks:
      - products_internal_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  products-microservice:
    image: silverflin/product-catalog-microservice:latest
    networks:
      - products_internal_network
      - profeco
    depends_on:
      rabbitmq:
        condition: service_healthy
      product-mongodb:
        condition: service_healthy

  # Reviews microservice
  reviews-mongodb:
    image: mongo
    networks:
      - reviews_internal_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  reviews-microservice:
    image: silverflin/reviews-microservice:latest
    networks:
      - reviews_internal_network
      - profeco
    depends_on:
      reviews-mongodb:
        condition: service_healthy

  # Customer Preferences microservice
  customer-preferences-mongodb:
    image: mongo
    networks:
      - preferences_internal_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  customer-preferences-microservice:
    image: silverflin/customer-preferences-microservice:latest
    networks:
      - preferences_internal_network
      - profeco
    depends_on:
      customer-preferences-mongodb:
        condition: service_healthy

  # Deals microservice 5070
  deals-mongodb:
    image: mongo
    networks:
      - deals_internal_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  deals-microservice:
    image: silverflin/deals-microservice:latest
    ports:
      - "5070:5070"
    networks:
      - deals_internal_network
      - profeco
    depends_on:
      rabbitmq:
        condition: service_healthy
      deals-mongodb:
        condition: service_healthy

  # Market Microservice 
  market-mysql:
    image: mysql:latest
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      MYSQL_DATABASE: market_microservices
    networks:
      - deals_internal_network
    volumes:
      - market-mysql-data:/var/lib/mysql
    healthcheck:
      test:
        [
          "CMD",
          "mysqladmin",
          "ping",
          "-h",
          "localhost",
          "-u",
          "root",
          "-pexample_password"
        ]
      interval: 10s
      timeout: 5s
      retries: 3

  market-microservice:
    # image: silverflin/market-microservice:latest
    build:
      context: ./MarketMicroservice
    networks:
      - deals_internal_network
      - profeco
    depends_on:
      market-mysql:
        condition: service_healthy

  # Report System 50052
  reports:
    image: mongo
    networks:
      - reports_internal_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet

  reports-microservice:
    image: silverflin/reports-microservice:latest
    networks:
      - reports_internal_network
      - profeco
    depends_on:
      reports:
        condition: service_healthy

networks:
  products_internal_network:
    driver: bridge
  profeco:
    driver: bridge
  reviews_internal_network:
    driver: bridge
  preferences_internal_network:
    driver: bridge
  reports_internal_network:
    driver: bridge
  deals_internal_network:
    driver: bridge

volumes:
  market-mysql-data:
